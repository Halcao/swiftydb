{"name":"SwiftyDB","tagline":"Making SQLite databases a blast","body":"![alt text] (http://i.imgur.com/uQhXJLJ.png?1 \"Logo\")\r\n\r\nThere are many libraries out there with the goal to help developers easily create and use SQLite databases. \r\nUnfortunately developers still have to get buggered down in simple tasks like writing table deifinitions \r\nand SQL queries to interract with the database. SwiftyDB automatically handles everything you don't want to spend your time doing.\r\n\r\n[![CI Status](http://img.shields.io/travis/Ã˜yvind Grimnes/SwiftyDB.svg?style=flat)](https://travis-ci.org/Ã˜yvind Grimnes/SwiftyDB)\r\n[![Version](https://img.shields.io/cocoapods/v/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n[![License](https://img.shields.io/cocoapods/l/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n[![Platform](https://img.shields.io/cocoapods/p/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n\r\n### Features\r\n- Table generation\r\n- Store any valid SQLite type\r\n- Support for optional types\r\n- Simple queries\r\n- Thread safe\r\n\r\n**Supported types**\r\n- `Int`\r\n- `Float`\r\n- `Double`\r\n- `Bool`\r\n- `NSNumber` / `NSNumber?`\r\n- `String` / `String?`\r\n- `NSDate` / `NSDate?`\r\n- `NSData` / `NSData?`\r\n\r\n## Usage\r\nLet's use this simple `Dog` class as an example\r\n\r\n```Swift\r\nclass Dog {\r\n  var id: NSNumber?\r\n  var name: String?\r\n  var owner: String?\r\n  var dateOfBirth: NSDate?\r\n}\r\n```\r\n\r\n### Defining your classes\r\nAll you have to do, is to make sure the class conforms to the `Storable` protocol. This is easily achieved by subclassing `NSObject`. \r\nSwiftyDB will automatically handle all the boring stuff behind like table creation behind the scenes.\r\n\r\n> Using the `dynamic` keyword is not necessary, but it helps to make sure the datatype is valid. Only values representable in Objective-C can be stored in this version because objects' properties are dynamically assigned upon retrieval.\r\n\r\n```Swift\r\nclass Dog: NSObject, Storable {\r\n  dynamic var id: NSNumber?\r\n  dynamic var name: String?\r\n  dynamic var owner: String?\r\n  dynamic var dateOfBirth: NSDate?\r\n\r\n  override required init() {\r\n    super.init()\r\n  }\r\n}\r\n```\r\n\r\n#### Primary keys\r\nIt is recommended you can implement the `primaryKeys()` method in the `Storable` protocol. \r\nThis method should return a set of property names which uniquely identifies an object.\r\n\r\n```Swift\r\nclass func primaryKeys() -> Set<String> {\r\n  return [\"id\"]\r\n}\r\n```\r\n\r\n#### Ignoring properties\r\nIf your class contains properties that you don't want in your database, you can implement the `ignoredProperties()` method in the `Storable` protocol.\r\nThis method should return a set of property names which will be ignored.\r\n\r\n```Swift\r\nclass func ignoredProperties() -> Set<String> {\r\n  return [\"name\"]\r\n}\r\n```\r\n\r\n### Use the database\r\nNo more custom methods for interacting  with the database. SwiftyDB handles everything automagically ðŸŽ©\r\n\r\n```Swift\r\nlet database = SwiftyDB(name: \"Test\")\r\nlet dog = Dog(id: 1, name: \"Max\", owner: \"Phil\", dateOfBirth: NSDate())\r\n```\r\nAdd or update a record\r\n```Swift\r\ndatabase.addObject(dog, update: true)\r\n````\r\n\r\nRetrieve records matching some optional parameters\r\n```Swift\r\n/* Returns a singe Dog object from the database */\r\ndatabase.getObjectForType(Dog.self)\r\ndatabase.getObjectForType(Dog.self, parameters: [\"id\": 1])\r\n\r\n/* Returns an array of Dog objects from the database */\r\ndatabase.getObjectsForType(Dog.self)\r\ndatabase.getObjectsForType(Dog.self, parameters: [\"id\": 1])\r\n````\r\n\r\nDelete records matching some parameters\r\n```Swift\r\ndatabase.deleteObjectsForType(Dog.self)\r\ndatabase.deleteObjectsForType(Dog.self, parameters: [\"name\": \"Max\"])\r\n```\r\n\r\n## Requirements\r\nIn this early version you must include the popular SQLite library FMDB in your project. This dependency will probably be removed at a later point. At least replaced by a more Swift friendly library.\r\n\r\n## Installation\r\n\r\nSwiftyDB is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```ruby\r\npod \"SwiftyDB\"\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}