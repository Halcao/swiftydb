{"name":"SwiftyDB","tagline":"Making SQLite databases a blast","body":"![alt text] (http://i.imgur.com/uQhXJLJ.png?1 \"Logo\")\r\n\r\nThere are many libraries out there that aims to help developers easily create and use SQLite databases. \r\nUnfortunately developers still have to get bogged down in simple tasks such as writing table definitions \r\nand SQL queries. SwiftyDB automatically handles everything you don't want to spend your time doing.\r\n\r\n[![CI Status](http://img.shields.io/travis/√òyvind Grimnes/SwiftyDB.svg?style=flat)](https://travis-ci.org/√òyvind Grimnes/SwiftyDB)\r\n[![Version](https://img.shields.io/cocoapods/v/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n[![License](https://img.shields.io/cocoapods/l/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n[![Platform](https://img.shields.io/cocoapods/p/SwiftyDB.svg?style=flat)](http://cocoapods.org/pods/SwiftyDB)\r\n\r\n### Features\r\n- Creates and updates databases, tables, and records automatically\r\n- Store any native Swift type\r\n- Supports optional types\r\n- Simple equality-based filtering\r\n- Thread safe database operations\r\n- Complex filtering\r\n- Store nested objects\r\n- Store collections\r\n\r\n## Usage\r\nAlmost pure plug and play. All you have to do is create an instance of SwiftyDB, and everything will be handled automagically behind the scenes üé©\r\n\r\n```Swift\r\nlet database = SwiftyDB(databaseName: \"Dogtopia\")\r\n```\r\n**Add or update a record**\r\n```Swift\r\ntry database.addObject(dog, update: true)\r\ntry database.addObjects(dogs, update: true)\r\n````\r\n\r\n**Retrieve data**\r\n\r\nRetrieve data with datatypes matching those of the type's properties\r\n```Swift\r\n/* Array of dictionaries representing `Dog` objects from the database */\r\ndatabase.dataForType(Dog.self)\r\ndatabase.dataForType(Dog.self, matchingFilters: [\"id\": 1])\r\n````\r\nDog data example\r\n```Swift\r\n[\r\n    \"id\": 1,                // As an Int\r\n    \"name\": \"Ghost\",        // As a String\r\n    \"owner\": \"John Snow\",   // As a String\r\n    \"birth\": August 6, 1996 // As an NSDate\r\n]\r\n```\r\n**Delete records**\r\n```Swift\r\ntry database.deleteObjectsForType(Dog.self)\r\ntry database.deleteObjectsForType(Dog.self, matchingFilters: [\"name\": \"Max\"])\r\n```\r\n\r\n### Defining your classes\r\nLet's use this simple `Dog` class as an example\r\n\r\n```Swift\r\nclass Dog {\r\n    var id: Int?\r\n    var name: String?\r\n    var owner: String?\r\n    var birth: NSDate?\r\n}\r\n```\r\n\r\nAll objects must conform to the `Storable` protocol.\r\n\r\n```Swift\r\npublic protocol Storable {\r\n    init()\r\n}\r\n```\r\n\r\nBy adding the `Storable` protocol and implementing `init()`, you are already ready to go.\r\n\r\n```Swift\r\nclass Dog: Storable {\r\n    var id: Int?\r\n    var name: String?\r\n    var owner: String?\r\n    var birth: NSDate?\r\n    \r\n    required init() {}\r\n}\r\n```\r\n\r\n##### Primary keys\r\nIt is recommended you can implement the `PrimaryKeys` protocol. The `primaryKeys()` method should return a set of property names which uniquely identifies an object.\r\n\r\n```Swift\r\nextension Dog: PrimaryKeys {\r\n    class func primaryKeys() -> Set<String> {\r\n        return [\"id\"]\r\n    }\r\n}\r\n```\r\n\r\n##### Ignoring properties\r\nIf your class contains properties that you don't want in your database, you can implement the `IgnoredProperties` protocol.\r\n\r\n```Swift\r\nextension Dog: IgnoredProperties {\r\n    class func ignoredProperties() -> Set<String> {\r\n        return [\"name\"]\r\n    }\r\n}\r\n```\r\n> Properties with datatypes that are not part of the `SQLiteValue` protocol, as defined by [TinySQLite](https://github.com/Oyvindkg/tinysqlite/blob/master/Pod/Classes/DatabaseConnection.swift), will automatically be ignored by SwiftyDB\r\n\r\n### Retrieve objects\r\nSwiftyDB can also retrieve complete objects with all properties assigned with data from the database. In order to achieve this, the type must be a subclass of `NSObject`, and all property types must be representable in in Objective-C. This is because pure Swift does not support dynamic, name-based assignment of properties. \r\n\r\n**Dynamic property types**\r\n- `Int`\r\n- `UInt`\r\n- `Float`\r\n- `Double`\r\n- `Bool`\r\n- `String` / `String?`\r\n- `NSNumber` / `NSNumber?`\r\n- `NSString` / `NSString?`\r\n- `NSDate` / `NSDate?`\r\n- `NSData` / `NSData?`\r\n\r\n#### Defining your dynamic classes\r\n\r\nUpdated Dog class subclassing `NSObject`, and using valid property types:\r\n\r\n```Swift\r\nclass Dog: NSObject, Storable {\r\n    var id: NSNumber? // Notice that 'Int?' is not supported. Use NSNumber? instead\r\n    var name: String?\r\n    var owner: String?\r\n    var birth: NSDate?\r\n    \r\n    override required init() {\r\n        super.init()\r\n    }\r\n}\r\n```\r\n\r\n**Retrieve objects**\r\n\r\n```Swift\r\n/* Returns an array of Dog objects */\r\ntry database.objectsForType(Dog.self)\r\ntry database.objectsForType(Dog.self, matchingFilters: [\"name\": \"Max\"])\r\n```\r\n\r\n## Installation\r\n\r\nSwiftyDB is available through [CocoaPods](http://cocoapods.org). To install\r\nit, simply add the following line to your Podfile:\r\n\r\n```ruby\r\npod \"SwiftyDB\"\r\n```\r\n\r\n## Author\r\n\r\n√òyvind Grimnes, oyvindkg@yahoo.com\r\n\r\n## License\r\n\r\nSwiftyDB is available under the MIT license. See the LICENSE file for more info.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}